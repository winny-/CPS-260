Microsoft (R) Macro Assembler Version 12.00.31101.0	    03/25/15 20:02:15
PA2							     Page 1 - 1


				TITLE PA2B
				; Program Description: Reverses string and arrays.
				; Author: Winston Weinert
				; Creation Date: 3/17/2015

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 = 0dh, 0ah			CRLF_ EQU <0dh, 0ah> 

 00000000			.code

				;-----------------------------------------------------
 00000000			main PROC
				;
				; Program entry point
				; Recieves: Nothing.
				; Returns: Nothing.
				;-----------------------------------------------------

 00000000			.data
 00000000 54 68 69 73 20	stringSource             BYTE 'This is the source string',0
	   69 73 20 74 68
	   65 20 73 6F 75
	   72 63 65 20 73
	   74 72 69 6E 67
	   00
 0000001A  0000001A [		stringTarget             BYTE LENGTHOF stringSource DUP('#')
	    23
	   ]
 00000034 01 02 03 04		byteArraySource          BYTE 1,2,3,4
 00000038  00000004 [		byteArrayTarget          BYTE LENGTHOF byteArraySource DUP(0)
	    00
	   ]
 0000003C 0001 0002 0003	wordArraySource          WORD 1,2,3,4
	   0004
 00000044  00000004 [		wordArrayTarget          WORD LENGTHOF wordArraySource DUP(0)
	    0000
	   ]
 0000004C 00000001		dwordArraySource         DWORD 1,2,3,4
	   00000002
	   00000003
	   00000004
 0000005C  00000004 [		dwordArrayTarget         DWORD LENGTHOF dwordArraySource DUP(0)
	    00000000
	   ]

 0000006C 23 23 23 23 23	reverseStringTitle       BYTE '###########################',CRLF_,
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 0D 0A 23
	   23 23 23 23 20
	   52 65 76 65 72
	   73 65 20 53 74
	   72 69 6E 67 20
	   23 23 23 23 23
	   23 0D 0A 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   0D 0A 0D 0A 00
				                              '##### Reverse String ######',CRLF_,
				                              '###########################',CRLF_,
				                              CRLF_,
				                              0
 000000C6 53 6F 75 72 63	stringSourceField        BYTE 'Source string: ',0
	   65 20 73 74 72
	   69 6E 67 3A 20
	   00
 000000D6 54 61 72 67 65	stringTargetField        BYTE 'Target string: ',0
	   74 20 73 74 72
	   69 6E 67 3A 20
	   00

 000000E6 23 23 23 23 23	reverseByteArrayTitle    BYTE '##############################',CRLF_,
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   0D 0A 23 23 23
	   23 23 20 52 65
	   76 65 72 73 65
	   20 42 79 74 65
	   20 41 72 72 61
	   79 20 23 23 23
	   23 23 0D 0A 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 0D
	   0A 00
				                              '##### Reverse Byte Array #####',CRLF_,
				                              '##############################',CRLF_,
				                              0
 00000147 23 23 23 23 23	reverseWordArrayTitle    BYTE '##############################',CRLF_,
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   0D 0A 23 23 23
	   23 23 20 52 65
	   76 65 72 73 65
	   20 57 6F 72 64
	   20 41 72 72 61
	   79 20 23 23 23
	   23 23 0D 0A 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 0D
	   0A 00
				                              '##### Reverse Word Array #####',CRLF_,
				                              '##############################',CRLF_,
				                              0
 000001A8 23 23 23 23 23	reverseDwordArrayTitle   BYTE '###############################',CRLF_,
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 0D 0A 23 23
	   23 23 23 20 52
	   65 76 65 72 73
	   65 20 44 77 6F
	   72 64 20 41 72
	   72 61 79 20 23
	   23 23 23 23 0D
	   0A 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 0D 0A 00
				                              '##### Reverse Dword Array #####',CRLF_,
				                              '###############################',CRLF_,
				                              0

 0000020C 0000 0000 004F	windowRect               SMALL_RECT <0,0,79,49>   ; 80 columns, 50 rows.
	   0031

 00000000			.code

				     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				     ; Resize the console window so the output does not need scrolling ;
				     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 00000000  6A F5		     push STD_OUTPUT_HANDLE   ; We want stdout's handle.
 00000002  E8 00000000 E	     call GetStdHandle        ; Get the handle, placed in eax.
				     
 00000007  68 0000020C R	     push OFFSET windowRect        ; New coordinates of the console edges.
 0000000C  6A 01		     push TRUE                     ; Yes, the coordinates are absolute -- not extending the original.
 0000000E  50			     push eax                      ; Handle to the console screen buffer.
 0000000F  E8 00000000 E	     call SetConsoleWindowInfo     ; Resize the console window.

				     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				     ; Reverse a string demonstration ;
				     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 00000014  BA 0000006C R	     mov  edx, OFFSET reverseStringTitle
 00000019  E8 00000000 E	     call WriteString
 0000001E  BA 000000C6 R	     mov  edx, OFFSET stringSourceField
 00000023  E8 00000000 E	     call WriteString
 00000028  BA 00000000 R	     mov  edx, OFFSET stringSource
 0000002D  E8 00000000 E	     call WriteString
 00000032  E8 00000000 E	     call Crlf

 00000037  B8 00000000 R	     mov  eax, OFFSET stringSource
 0000003C  BB 0000001A R	     mov  ebx, OFFSET stringTarget
 00000041  E8 0000014F		     call ReverseString

 00000046  BA 000000D6 R	     mov  edx, OFFSET stringTargetField
 0000004B  E8 00000000 E	     call WriteString
 00000050  BA 0000001A R	     mov  edx, OFFSET stringTarget
 00000055  E8 00000000 E	     call WriteString
 0000005A  E8 00000000 E	     call Crlf
 0000005F  E8 00000000 E	     call Crlf

				     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				     ; Reverse a byte array demonstration ;
				     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 00000064  BA 000000E6 R	     mov  edx, OFFSET reverseByteArrayTitle
 00000069  E8 00000000 E	     call WriteString

 0000006E  B8 00000034 R	     mov  eax, OFFSET byteArraySource
 00000073  BB 00000038 R	     mov  ebx, OFFSET byteArrayTarget
 00000078  B9 00000004		     mov  ecx, LENGTHOF byteArraySource
 0000007D  BA 00000001		     mov  edx, TYPE byteArraySource
 00000082  E8 000000A5		     call ReverseArray

 00000087  BE 00000038 R	     mov  esi, OFFSET byteArrayTarget
 0000008C  B9 00000004		     mov  ecx, LENGTHOF byteArrayTarget
 00000091  BB 00000001		     mov  ebx, TYPE byteArrayTarget
 00000096  E8 00000000 E	     call DumpMem

 0000009B  E8 00000000 E	     call Crlf

				     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				     ; Reverse a word array demonstration ;
				     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 000000A0  BA 00000147 R	     mov  edx, OFFSET reverseWordArrayTitle
 000000A5  E8 00000000 E	     call WriteString

 000000AA  B8 0000003C R	     mov  eax, OFFSET wordArraySource
 000000AF  BB 00000044 R	     mov  ebx, OFFSET wordArrayTarget
 000000B4  B9 00000004		     mov  ecx, LENGTHOF wordArraySource
 000000B9  BA 00000002		     mov  edx, TYPE wordArraySource
 000000BE  E8 00000069		     call ReverseArray

 000000C3  BE 00000044 R	     mov  esi, OFFSET wordArrayTarget
 000000C8  B9 00000004		     mov  ecx, LENGTHOF wordArrayTarget
 000000CD  BB 00000002		     mov  ebx, TYPE wordArrayTarget
 000000D2  E8 00000000 E	     call DumpMem

 000000D7  E8 00000000 E	     call Crlf

				     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				     ; Reverse a dword array demonstration ;
				     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 000000DC  BA 000001A8 R	     mov  edx, OFFSET reverseDwordArrayTitle
 000000E1  E8 00000000 E	     call WriteString

 000000E6  B8 0000004C R	     mov  eax, OFFSET dwordArraySource
 000000EB  BB 0000005C R	     mov  ebx, OFFSET dwordArrayTarget
 000000F0  B9 00000004		     mov  ecx, LENGTHOF dwordArraySource
 000000F5  BA 00000004		     mov  edx, TYPE dwordArraySource
 000000FA  E8 0000002D		     call ReverseArray

 000000FF  BE 0000005C R	     mov  esi, OFFSET dwordArrayTarget
 00000104  B9 00000004		     mov  ecx, LENGTHOF dwordArrayTarget
 00000109  BB 00000004		     mov  ebx, TYPE dwordArrayTarget
 0000010E  E8 00000000 E	     call DumpMem

 00000113  E8 00000000 E	     call Crlf

				     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 00000118  E8 00000000 E	     call Crlf ; Extra crlf.

 0000011D  E8 00000000 E	     call WaitMsg

 00000122  68 00000000		     push DWORD PTR 0    ; Exit status code.
 00000127  E8 00000000 E	     call ExitProcess    ; Exit.
 0000012C			main ENDP

				;-----------------------------------------------------
 0000012C			ReverseArray PROC
				;
				; Reverses an array of elements with identical widths.
				; Recieves: EAX -- the input array
				;           EBX -- the output array
				;           ECX -- the number of elements in the array
				;           EDX -- the width of each element in the array
				; Returns: Nothing.
				;-----------------------------------------------------
 0000012C  9C			     pushfd
 0000012D  60			     pushad

 0000012E  8B F0		     mov  esi, eax  ; Copy input array
 00000130  8B FA		     mov  edi, edx  ; Copy width for safe keeping

 00000132  8B C1		     mov  eax, ecx  ; Copy num of elems into eax for multiplication
 00000134  F7 E2		     mul  edx       ; (num elems) * width = (bytes in array)
 00000136  03 C6		     add  eax, esi  ; (bytes in array) + (offset of input array) = (last address in input array)

 00000138  8B CF		     mov  ecx, edi  ; Set parameter for CopyMemory (number of bytes to copy) only once
 0000013A  8B D7		     mov  edx, edi  ; Restore edx
 0000013C			L1:
 0000013C  2B C2		     sub  eax, edx  ; Decrement the pointer to the src by the width before calling CopyMemory

 0000013E  E8 00000009		     call CopyMemory

 00000143  03 DA		     add  ebx, edx  ; Increment the pointer to dest after CopyMemory
 00000145  3B C6		     cmp  eax, esi
 00000147  75 F3		     jne  L1

 00000149  61			     popad
 0000014A  9D			     popfd
 0000014B  C3			     ret
 0000014C			ReverseArray ENDP

				;-----------------------------------------------------
 0000014C			CopyMemory PROC
				;
				; Copy memory of a given length. Is optimized for
				; memory lengths that are evenly divisible by 2 or 4.
				; Recieves: EAX -- the source memory
				;           EBX -- the dest memory
				;           ECX -- the number of bytes to copy
				;-----------------------------------------------------
 0000014C  9C			     pushfd
 0000014D  60			     pushad
				     
 0000014E  FC			     cld            ; Clear direction flag only once
 0000014F  8B F0		     mov  esi, eax  ; Set up esi for lodsb/lodsw/lodsd only once

 00000151  0F BA E1 00		     bt   ecx, 0         ; Test the least significant bit in ecx (bt copies that bit into CF).
 00000155  72 35		     jb   OddNumBytes    ; if CF is set we have an odd number of bytes, so copy each byte one at a time.

 00000157  8B C1		     mov  eax, ecx            ; Set dividend to number of bytes to copy.
 00000159  33 D2		     xor  edx, edx            ; Clear edx, the upper half of the dividind.
 0000015B  BF 00000004		     mov  edi, 4              ; Set the divisor.
 00000160  F7 F7		     div  edi                 ; Do the division.
 00000162  83 FA 00		     cmp  edx, 0              ; Test the remainder against 0.
 00000165  74 19		     je   DivisibleByFour     ; If remainder is 0 then copy bytes four at a time.

 00000167			DivisibleByTwo:     ; For aesthetics only.
 00000167  8B C1		     mov  eax, ecx  ; Set the dividend to the number of bytes to copy
 00000169  33 D2		     xor  edx, edx  ; Clear the upper half of the dividend.
 0000016B  BF 00000002		     mov  edi, 2    ; Divide by two.
 00000170  F7 F7		     div  edi       ; Do the division.
 00000172  8B C8		     mov  ecx, eax  ; Move the quotient into ecx = (number of loops)
 00000174			L2:
 00000174  66| AD		     lodsw          ; Copy the word at [esi], and increment esi by two.
 00000176  66| 89 03		     mov  [ebx], ax ; Copy the word into the destination.
 00000179  83 C3 02		     add  ebx, 2    ; Increment ebx to the next word.
 0000017C  E2 F6		     loop L2
 0000017E  EB 12		     jmp  Cleanup

 00000180			DivisibleByFour:
 00000180  8B C8		     mov  ecx, eax       ; Move the quotient into ecx = (number of loops)
 00000182			L3:
 00000182  AD			     lodsd               ; Copy the word at [esi] and increment esi by four.
 00000183  89 03		     mov  [ebx], eax     ; Copy the word into the destination.
 00000185  83 C3 04		     add  ebx, 4         ; Increment ebx to the next dword.
 00000188  E2 F8		     loop L3
 0000018A  EB 06		     jmp Cleanup

 0000018C			OddNumBytes:
 0000018C			L1:
 0000018C  AC			     lodsb          ; Load the byte at [esi] and increment esi by one.
 0000018D  88 03		     mov  [ebx], al ; Copy the byte into the destination.
 0000018F  43			     inc  ebx       ; Increment ebx by one.
 00000190  E2 FA		     loop L1

 00000192			Cleanup:
 00000192  61			     popad
 00000193  9D			     popfd
 00000194  C3			     ret
 00000195			CopyMemory ENDP

				;-----------------------------------------------------
 00000195			ReverseString PROC
				;
				; Reverses a byte string.
				; Note: This procedure will not work with a string
				;       larger than 2 GiB, since ecx will sign
				;       overflow on repnz scasb.
				; Recieves: EAX -- the input string
				;           EBX -- the output string
				; Returns: Nothing.
				;-----------------------------------------------------
 00000195  9C			     pushfd
 00000196  60			     pushad

 00000197  8B D0		     mov  edx, eax ; make a copy

				     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				     ; (1) Find the end of the input string ;
				     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 00000199  8B F8		     mov  edi, eax  ; Set edi for scasb, much like how lodsb uses esi.
 0000019B  32 C0		     xor  al, al    ; Set al to the value of a nul-byte.
 0000019D  FC			     cld            ; Clear directional flag = increment edi in scasb.
 0000019E  B9 FFFFFFFF		     mov  ecx, -1   ; Set loop counter to negative 1 so repnz continues until ZF is set.
 000001A3  F2/ AE		     repnz scasb    ; Load the byte at [edi], test the byte against al -- setting/clearing flags,
				                    ; increment edi by one, repeat until ecx is 0 or ZF is set.
 000001A5  83 EF 02		     sub  edi, 2    ; We do not want the the address after the nul, nor the nul itself.

				     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				     ; (2) Copy the string in reverse order ;
				     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 000001A8  FD			     std            ; Set direction flag indicates to lodsb to decrement esi after copying the byte.
 000001A9  8B F7		     mov  esi, edi  ; Set esi for lodsb to the last non-nul byte of the input string.
 000001AB			L2:
 000001AB  AC			     lodsb          ; Load the byte into al and decrement esi.
 000001AC  88 03		     mov  [ebx], al ; Copy al into the dest string.
 000001AE  43			     inc  ebx       ; Increment the dest string address.
 000001AF  3B F2		     cmp  esi, edx  ; Compare the next input address to copy from to the first address of the input string.
 000001B1  73 F8		     jae  L2        ; Continue copying until esi < edx.

 000001B3  C6 03 00		     mov  BYTE PTR [ebx], 0   ; Add the trailing nul to dest

 000001B6  61			     popad
 000001B7  9D			     popfd
 000001B8  C3			     ret
 000001B9			ReverseString ENDP

				END main
Microsoft (R) Macro Assembler Version 12.00.31101.0	    03/25/15 20:02:15
PA2							     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000214 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000001B9 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CopyMemory . . . . . . . . . . .	P Near	 0000014C _TEXT	Length= 00000049 Public STDCALL
  DivisibleByTwo . . . . . . . .	L Near	 00000167 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 00000174 _TEXT	
  DivisibleByFour  . . . . . . .	L Near	 00000180 _TEXT	
  L3 . . . . . . . . . . . . . .	L Near	 00000182 _TEXT	
  OddNumBytes  . . . . . . . . .	L Near	 0000018C _TEXT	
  L1 . . . . . . . . . . . . . .	L Near	 0000018C _TEXT	
  Cleanup  . . . . . . . . . . .	L Near	 00000192 _TEXT	
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReverseArray . . . . . . . . . .	P Near	 0000012C _TEXT	Length= 00000020 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 0000013C _TEXT	
ReverseString  . . . . . . . . .	P Near	 00000195 _TEXT	Length= 00000024 Public STDCALL
  L2 . . . . . . . . . . . . . .	L Near	 000001AB _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000012C Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CRLF_  . . . . . . . . . . . . .	Text   	 0dh, 0ah
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
byteArraySource  . . . . . . . .	Byte	 00000034 _DATA	
byteArrayTarget  . . . . . . . .	Byte	 00000038 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
dwordArraySource . . . . . . . .	DWord	 0000004C _DATA	
dwordArrayTarget . . . . . . . .	DWord	 0000005C _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
red  . . . . . . . . . . . . . .	Number	 00000004h   
reverseByteArrayTitle  . . . . .	Byte	 000000E6 _DATA	
reverseDwordArrayTitle . . . . .	Byte	 000001A8 _DATA	
reverseStringTitle . . . . . . .	Byte	 0000006C _DATA	
reverseWordArrayTitle  . . . . .	Byte	 00000147 _DATA	
stringSourceField  . . . . . . .	Byte	 000000C6 _DATA	
stringSource . . . . . . . . . .	Byte	 00000000 _DATA	
stringTargetField  . . . . . . .	Byte	 000000D6 _DATA	
stringTarget . . . . . . . . . .	Byte	 0000001A _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
windowRect . . . . . . . . . . .	SMALL_RECT  0000020C _DATA	
wordArraySource  . . . . . . . .	Word	 0000003C _DATA	
wordArrayTarget  . . . . . . . .	Word	 00000044 _DATA	
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
